<?php

function jwt_permission() {
    return array(
        'administer_jwt' => array(
            'title' => t('Administer JASON Web Tokens.')
        ),
    );
}

/**
 * Implements hook_menu()
 */
function jwt_menu() {
    $items = array();
    $items['admin/config/administration/jwt'] = array(
        'title' => 'Administer JWT Tokens',
        'description' => 'Page to set up and administer site-wide JWT tokens',
        'page callback' => 'backdrop_get_form',
        'page arguments' => array('jwt_configuration_form'),
        'access arguments' =>  array('administer_jwt'),
    );
    return $items;
}

/**
 * Implements hook_form
 * JWT Admin Page
 */
function jwt_configuration_form($form, &$form_state) {
    $cur_secret = state_get('jwt secret');

    $form['#attached']['js'][] = array(
        'type' => 'file',
        'data' => backdrop_get_path('module', 'jwt') . '/admin-scripts.js',
    );

    $form['jwt_secret'] = array(
        '#type' => 'textfield',
        '#size' => '32',
        '#title' => 'Secret Key',
        '#default_value' => $cur_secret,
        '#maxlength' => '1024',
    );

    $form['generate_secret'] = array(
        '#type' => 'button',
        '#value' => 'Generate Secret Key',
        '#attributes' => array('onclick' => 'testAlert();return false'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Save',
    );
    return $form;
}

/** JWT Form Submit Handler
 * 
 */
function jwt_configuration_form_submit($form, &$form_state) {
    try{
        $secret = $form_state['values']['jwt_secret'];
        state_set("jwt secret", $secret);
        backdrop_set_message(t('Successfully set JWT secret.'), 'status');
    } catch( exception $e ) {
        backdrop_set_message(t('Could not set jwt secret: '.$e->getMessage()), 'error');
        watchdog('jwt', $e, array(), WATCHDOG_ERROR);
    }
}

function base64UrlEncode($text) {
    return str_replace(
        ['+', '/', '='],
        ['-', '_', ''],
        base64_encode($text)
    );
}

function encode_jwt($payload_data) {
    $secret_key = state_get('jwt secret');
    //Create token header
    $header = json_encode([
        'typ' => 'JWT',
        'alg' => 'HS256',
    ]);

    // Create token payload
    $payload = json_encode($payload_data);

    //Encode Header
    $base64UrlHeader = base64UrlEncode($header);

    //Encode Payload
    $base64UrlPayload = base64UrlEncode($payload);

    //Create Signature
    $signature = hash_hmac('sha256', $base64UrlHeader . '.' . $base64UrlPayload, $secret, true);

    //Encode Signature to Base64Url String
    $base64UrlSignature = base64UrlEncode($signature);

    //Create JWT
    $jwt = $base64UrlHeader . '.' . $base64UrlPayload . '.' . $base64UrlSignature;
    
    return $jwt;
}
