<?php

/**
 * Implements hook_permissions
 */
function jwt_permission() {
    return array(
        'administer_jwt' => array(
            'title' => t('Administer JSON Web Tokens.')
        ),
    );
}

/**
 * Implements hook_menu()
 */
function jwt_menu() {
    $items = array();
    $items['admin/config/administration/jwt'] = array(
        'title' => 'Administer JWT Tokens',
        'description' => 'Page to set up and administer site-wide JWT tokens',
        'page callback' => 'backdrop_get_form',
        'page arguments' => array('jwt_configuration_form'),
        'access arguments' =>  array('administer_jwt'),
    );
    return $items;
}

/**
 * Implements hook_form
 * JWT Admin Page
 */
function jwt_configuration_form($form, &$form_state) {
    $cur_secret = state_get('jwt secret');
    $timeout = state_get('jwt timeout');

    $form['#attached']['js'][] = array(
        'type' => 'file',
        'data' => backdrop_get_path('module', 'jwt') . '/admin-scripts.js',
    );

    $form['jwt_secret'] = array(
        '#type' => 'textfield',
        '#size' => '32',
        '#title' => 'Secret Key',
        '#default_value' => $cur_secret,
        '#maxlength' => '1024',
    );

    $form['generate_secret'] = array(
        '#type' => 'button',
        '#value' => 'Generate Secret Key',
        '#attributes' => array('onclick' => 'testAlert();return false'),
    );

    $form['default_timeout'] = array(
        '#type' => 'textfield',
        '#size' => '32',
        '#default_value' => $timeout,
        '#title' => 'Default Timeout (in seconds)',
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Save',
    );
    return $form;
}

/** 
 * JWT Admin Page Form Submit Handler
 */
function jwt_configuration_form_submit($form, &$form_state) {
    $timeout = $form_state['values']['default_timeout'];
 
    state_set('jwt timeout', $timeout);
    try{
        $secret = $form_state['values']['jwt_secret'];
        state_set('jwt secret', $secret);
        backdrop_set_message(t('Successfully set JWT secret.'), 'status');
    } catch( exception $e ) {
        backdrop_set_message(t('Could not set jwt secret: '.$e->getMessage()), 'error');
        watchdog('jwt', $e, array(), WATCHDOG_ERROR);
    }
}

/**
 * Helper function to replace problematic characters
 */
function _jwt_base64_url_encode($text) {
    return str_replace(
        ['+', '/', '='],
        ['-', '_', ''],
        base64_encode($text)
    );
}

function encode_jwt($payload_data, $expiration=false) {
    $current_time = time();
    $expiration = $expiration ? (int) $expiration : (int) state_get('jwt timeout');
    $payload_data['expiration'] = $current_time + $expiration;
    
    // Create token header.
    $header = json_encode([
        'typ' => 'JWT',
        'alg' => 'HS256',
    ]);

    // Create token payload.
    $payload = json_encode($payload_data);

    // Encode Header.
    $base64_url_header = _jwt_base64_url_encode($header);

    // Encode Payload.
    $base64_url_payload = _jwt_base64_url_encode($payload);

    // Encode Signature.
    $base64_url_signature = _jwt_encode_signature($base64_url_header, $base64_url_payload);

    // Create JWT.
    $jwt = $base64_url_header . '.' . $base64_url_payload . '.' . $base64_url_signature;
    
    return $jwt;
}

function _jwt_encode_signature($base64_url_header, $base64_url_payload) {
    $secret_key = state_get('jwt secret');

    // Create Signature.
    $signature = hash_hmac('sha256', $base64_url_header . '.' . $base64_url_payload, $secret_key, true);

    // Encode Signature to Base64Url String.
    return _jwt_base64_url_encode($signature);
}

function validate_jwt($jwt) {
    if (!$jwt) {
        watchdog('JWT', 'JWT Verification Failed: No JWT token provided.', array(), WATCHDOG_ALERT);
        return false;
    }

    $current_time = time();
    $token_parts = explode('.', $jwt);
    $header = base64_decode($token_parts[0]);
    $payload = base64_decode($token_parts[1]);
    $decoded_payload = json_decode($payload);
    $signature = $token_parts[2];
    $expiration_time = $decoded_payload->expiration;

    // Check expiration time.
    if ($expiration_time < $current_time) {
        return false;
    }

    // Build Signature.
    $base64_url_header = _jwt_base64_url_encode($header);
    $base64_url_payload = _jwt_base64_url_encode($payload);
    $base64_url_signature = _jwt_encode_signature($base64_url_header, $base64_url_payload);

    // Verify Signature.
    $valid_signature = ( $base64_url_signature === $signature );

    if (!$valid_signature) {
        return false;
    } else {
        return $decoded_payload;
    }
}

function jwt_decode($jwt) {
    return validate_jwt($jwt);
}
